version: 2.1

orbs:
  slack: circleci/slack@4.2.0

parameters:
  workflow_id:
    type: string
    default: ${CIRCLE_WORKFLOW_ID:0:7}

executors:
  node:
    docker:
      - image: circleci/node:13.8.0
  python:
    docker:
      - image: python:3.7-alpine3.16
  aws:
    docker:
      - image: amazon/aws-cli

commands:
  destroy-environment:
    description: Destroy the environments after fail
    parameters:
      id: 
        type: string  
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:   
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.id >> 
            aws s3 rm s3://udapeople-<< parameters.id >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.id >>

  revert-migrations:
    description: Revert the last migration 
    parameters:
      id:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Revert Migration
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/${KVDB_BUCKET_ID}/migration_<< parameters.id >>)
            if [[ $SUCCESS == 1 ]];
            then
              cd ~/project/backend
              npm install
              npm run build
              npm run migration:revert
            fi

  aws_cli_install:
    description: This command installs AWSCLI
    steps:
      - run:
          name: Install AWS CLI
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            sudo apt-get install unzip -y
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install  

jobs:
  build-frontend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          event: fail
          template: basic_fail_1

  build-backend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          event: fail
          template: basic_fail_1

  test-frontend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end Unit Tests
          command: |
            cd frontend
            npm install
            npm run test
      - slack/notify:
          event: fail
          template: basic_fail_1

  test-backend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end Unit Tests
          command: |
            cd frontend
            npm install
            npm run test
      - slack/notify:
          event: fail
          template: basic_fail_1

  scan-frontend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan frontend dependencies
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - slack/notify:
          event: fail
          template: basic_fail_1

  scan-backend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan backend dependencies
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - slack/notify:
          event: fail
          template: basic_fail_1
          
  deploy-infrastructure:
    executor: aws
    steps:
      - checkout
      - run:
          name: Install Dependencies  
          command: |
            yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            PUBLIC_IP=$(aws --region us-east-1 ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            echo $PUBLIC_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment

  configure-infrastructure:
    executor: python
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["80:36:d9:d0:0a:39:89:aa:ee:92:11:cf:3d:6c:f4:14"]
      - run:
          name: Install dependencies 
          command: |
            apk add --update ansible tar gzip aws-cli
            cat .circleci/ansible/inventory.txt
      - attach_workspace:
          at: ~/
      - run:
          name: Configure server
          command: |
            cd backend
            echo ENVIRONMENT=production > ".env"
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> ".env"
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> ".env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> ".env"
            echo NODE_ENV=production >> ".env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"
            cat .env
            cd ..
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - persist_to_workspace:
          root: ~/
          paths: 
            - project/backend
      - destroy-environment
      - slack/notify:
          event: fail
          template: basic_fail_1

  run-migrations:
    executor: node
    steps:
      - checkout
      - run: 
          name: Install dependencies
          command: |
            sudo apt install -y tar gzip curl
      - aws_cli_install
      - restore_cache:
          keys: [backend-build]
      - attach_workspace:
          at: ~/
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations >> migrations.txt
      - run:
          name: Send migration status to kvdb.io
          command: |   
            if grep -q "has been executed successfully." ~/project/backend/migrations.txt
            then
              curl https://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - destroy-environment
      - revert-migrations
      - slack/notify:
          event: fail
          template: basic_fail_1
         
  deploy-frontend:
    executor: python
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache tar gzip nodejs npm aws-cli
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws --region us-east-1 ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment
      - revert-migrations
      - slack/notify:
          event: fail
          template: basic_fail_1

  deploy-backend:
    executor: python
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["80:36:d9:d0:0a:39:89:aa:ee:92:11:cf:3d:6c:f4:14"]
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache tar gzip curl nodejs npm ansible aws-cli 
      - restore_cache:
          keys: [backend-build]
      - attach_workspace:
          at: ~/
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm install
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            mkdir -p ~/project/.circleci/ansible/roles/deploy/files/
            mv artifact.tar.gz .circleci/ansible/roles/deploy/files/artifact.tar.gz
            cd .circleci/ansible
            echo "Contents are $(cat inventory.txt)"
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment
      - revert-migrations
      - slack/notify:
          event: fail
          template: basic_fail_1

  smoke-test:
    executor: node
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt install -y curl
      - aws_cli_install
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(aws --region us-east-1 ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            export API_URL_ENDPOINT="${API_URL}/api/status"
            echo "${API_URL_ENDPOINT}"
            if curl --connect-timeout 60 "${API_URL_ENDPOINT}" | grep "ok"; then exit 0; else exit 1; fi
      - run:
          name: Frontend smoke test.
          command: |
            export URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl --connect-timeout 60 ${URL} | grep "Welcome"; then exit 0; else exit 1; fi
      - destroy-environment
      - revert-migrations
      - slack/notify:
          event: fail
          template: basic_fail_1

  cloudfront-update:
    executor: node
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt install -y tar gzip curl
      - aws_cli_install
      - run:
          name: Update cloudfront distribution
          command: |
            export OldWorkflowID=$(aws cloudformation list-exports \
            --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
            echo "${OldWorkflowID}"
      - destroy-environment
      - revert-migrations
      - slack/notify:
          event: fail
          template: basic_fail_1

  cleanup:
    executor: aws
    steps:
      - checkout
      - run:
          name: Get old stack workflow id and Remove them
          command: |
            export OldWorkflowID=<<pipeline.parameters.workflow_id>>
            export STACKS=$(aws cloudformation list-stacks \
            --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE --no-paginate --output text)
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              echo "------------------ Delete confirmed ------------------"
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}" 
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            else
              echo "------------------ Cannot cleanup ------------------"
            fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]

